generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  username       String    @default("user")
  imageUrl       String    @default("https://cdn.discordapp.com/attachments/671848184938758155/925044142550163456/ixysmile.png")
  email          String    @unique
  hashedPassword String?
  role           UserType  @default(BASIC)
  sessions       Session[]
  streams        Stream[]
  tokens         Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model Stream {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  ownerId      Int
  imageUrl     String    @default("https://cdn.discordapp.com/attachments/671848184938758155/925044142550163456/ixysmile.png")
  type         StreamType @default(PUBLIC)
  messageCount Int        @default(0)
  owner        User       @relation(fields: [ownerId], references: [id])
  messages     Message[]
  replies      Reply[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
}

enum UserType {
  BASIC
  ADVANCED
  PRO
}

enum TokenType {
  RESET_PASSWORD
}

enum StreamType {
  PUBLIC
  PRIVATE
  AI
  FRIENDS
}
